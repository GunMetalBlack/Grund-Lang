//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/noah/Desktop/Codeing/Grund-Lang/AntlrCSharp/Grund.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GrundLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, IFBLOCK=29, WHILE=30, THIS=31, 
		STATIC=32, CLASSPOINTER=33, EXTENDS=34, FUNC=35, STRUCT=36, BOOL_OPERATOR=37, 
		INTEGER=38, FLOAT=39, STRING=40, BOOL=41, NULL=42, WS=43, LINE_COMMENT=44, 
		IDENTIFIER=45;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "IFBLOCK", "WHILE", "THIS", "STATIC", "CLASSPOINTER", 
		"EXTENDS", "FUNC", "STRUCT", "BOOL_OPERATOR", "INTEGER", "FLOAT", "STRING", 
		"BOOL", "NULL", "WS", "LINE_COMMENT", "IDENTIFIER"
	};


	public GrundLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrundLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'ELSE'", "':'", "'END'", "'{'", "'}'", "'='", 
		"'VAR'", "','", "'['", "']'", "'.'", "'!'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'++'", "'--'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'IF'", 
		null, "'THIS:'", "'STATIC'", "'=>'", "'EXTENDS'", null, "'STRUK'", null, 
		null, null, null, null, "'NULL'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "IFBLOCK", "WHILE", "THIS", "STATIC", "CLASSPOINTER", 
		"EXTENDS", "FUNC", "STRUCT", "BOOL_OPERATOR", "INTEGER", "FLOAT", "STRING", 
		"BOOL", "NULL", "WS", "LINE_COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grund.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrundLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,304,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
		4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
		1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
		1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
		1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,175,8,
		29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,3,34,209,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,
		1,36,1,36,1,36,1,36,3,36,222,8,36,1,37,3,37,225,8,37,1,37,4,37,228,8,37,
		11,37,12,37,229,1,38,3,38,233,8,38,1,38,4,38,236,8,38,11,38,12,38,237,
		1,38,1,38,4,38,242,8,38,11,38,12,38,243,1,39,1,39,5,39,248,8,39,10,39,
		12,39,251,9,39,1,39,1,39,1,39,5,39,256,8,39,10,39,12,39,259,9,39,1,39,
		3,39,262,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,273,8,
		40,1,41,1,41,1,41,1,41,1,41,1,42,4,42,281,8,42,11,42,12,42,282,1,42,1,
		42,1,43,1,43,1,43,1,43,5,43,291,8,43,10,43,12,43,294,9,43,1,43,1,43,1,
		44,1,44,5,44,300,8,44,10,44,12,44,303,9,44,0,0,45,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
		30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
		42,85,43,87,44,89,45,1,0,7,1,0,48,57,1,0,34,34,1,0,39,39,3,0,9,10,13,13,
		32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
		122,318,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
		11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
		0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
		0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,93,1,0,0,0,5,95,1,0,0,0,7,97,1,0,0,
		0,9,102,1,0,0,0,11,104,1,0,0,0,13,108,1,0,0,0,15,110,1,0,0,0,17,112,1,
		0,0,0,19,114,1,0,0,0,21,118,1,0,0,0,23,120,1,0,0,0,25,122,1,0,0,0,27,124,
		1,0,0,0,29,126,1,0,0,0,31,128,1,0,0,0,33,130,1,0,0,0,35,132,1,0,0,0,37,
		134,1,0,0,0,39,136,1,0,0,0,41,138,1,0,0,0,43,141,1,0,0,0,45,144,1,0,0,
		0,47,147,1,0,0,0,49,150,1,0,0,0,51,152,1,0,0,0,53,154,1,0,0,0,55,157,1,
		0,0,0,57,160,1,0,0,0,59,174,1,0,0,0,61,176,1,0,0,0,63,182,1,0,0,0,65,189,
		1,0,0,0,67,192,1,0,0,0,69,208,1,0,0,0,71,210,1,0,0,0,73,221,1,0,0,0,75,
		224,1,0,0,0,77,232,1,0,0,0,79,261,1,0,0,0,81,272,1,0,0,0,83,274,1,0,0,
		0,85,280,1,0,0,0,87,286,1,0,0,0,89,297,1,0,0,0,91,92,5,59,0,0,92,2,1,0,
		0,0,93,94,5,40,0,0,94,4,1,0,0,0,95,96,5,41,0,0,96,6,1,0,0,0,97,98,5,69,
		0,0,98,99,5,76,0,0,99,100,5,83,0,0,100,101,5,69,0,0,101,8,1,0,0,0,102,
		103,5,58,0,0,103,10,1,0,0,0,104,105,5,69,0,0,105,106,5,78,0,0,106,107,
		5,68,0,0,107,12,1,0,0,0,108,109,5,123,0,0,109,14,1,0,0,0,110,111,5,125,
		0,0,111,16,1,0,0,0,112,113,5,61,0,0,113,18,1,0,0,0,114,115,5,86,0,0,115,
		116,5,65,0,0,116,117,5,82,0,0,117,20,1,0,0,0,118,119,5,44,0,0,119,22,1,
		0,0,0,120,121,5,91,0,0,121,24,1,0,0,0,122,123,5,93,0,0,123,26,1,0,0,0,
		124,125,5,46,0,0,125,28,1,0,0,0,126,127,5,33,0,0,127,30,1,0,0,0,128,129,
		5,42,0,0,129,32,1,0,0,0,130,131,5,47,0,0,131,34,1,0,0,0,132,133,5,37,0,
		0,133,36,1,0,0,0,134,135,5,43,0,0,135,38,1,0,0,0,136,137,5,45,0,0,137,
		40,1,0,0,0,138,139,5,43,0,0,139,140,5,43,0,0,140,42,1,0,0,0,141,142,5,
		45,0,0,142,143,5,45,0,0,143,44,1,0,0,0,144,145,5,61,0,0,145,146,5,61,0,
		0,146,46,1,0,0,0,147,148,5,33,0,0,148,149,5,61,0,0,149,48,1,0,0,0,150,
		151,5,62,0,0,151,50,1,0,0,0,152,153,5,60,0,0,153,52,1,0,0,0,154,155,5,
		62,0,0,155,156,5,61,0,0,156,54,1,0,0,0,157,158,5,60,0,0,158,159,5,61,0,
		0,159,56,1,0,0,0,160,161,5,73,0,0,161,162,5,70,0,0,162,58,1,0,0,0,163,
		164,5,87,0,0,164,165,5,72,0,0,165,166,5,73,0,0,166,167,5,76,0,0,167,175,
		5,69,0,0,168,169,5,85,0,0,169,170,5,78,0,0,170,171,5,76,0,0,171,172,5,
		69,0,0,172,173,5,83,0,0,173,175,5,83,0,0,174,163,1,0,0,0,174,168,1,0,0,
		0,175,60,1,0,0,0,176,177,5,84,0,0,177,178,5,72,0,0,178,179,5,73,0,0,179,
		180,5,83,0,0,180,181,5,58,0,0,181,62,1,0,0,0,182,183,5,83,0,0,183,184,
		5,84,0,0,184,185,5,65,0,0,185,186,5,84,0,0,186,187,5,73,0,0,187,188,5,
		67,0,0,188,64,1,0,0,0,189,190,5,61,0,0,190,191,5,62,0,0,191,66,1,0,0,0,
		192,193,5,69,0,0,193,194,5,88,0,0,194,195,5,84,0,0,195,196,5,69,0,0,196,
		197,5,78,0,0,197,198,5,68,0,0,198,199,5,83,0,0,199,68,1,0,0,0,200,201,
		5,70,0,0,201,202,5,85,0,0,202,203,5,78,0,0,203,209,5,75,0,0,204,205,5,
		77,0,0,205,206,5,69,0,0,206,207,5,84,0,0,207,209,5,72,0,0,208,200,1,0,
		0,0,208,204,1,0,0,0,209,70,1,0,0,0,210,211,5,83,0,0,211,212,5,84,0,0,212,
		213,5,82,0,0,213,214,5,85,0,0,214,215,5,75,0,0,215,72,1,0,0,0,216,217,
		5,65,0,0,217,218,5,78,0,0,218,222,5,68,0,0,219,220,5,79,0,0,220,222,5,
		82,0,0,221,216,1,0,0,0,221,219,1,0,0,0,222,74,1,0,0,0,223,225,5,45,0,0,
		224,223,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,228,7,0,0,0,227,226,
		1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,76,1,0,0,0,
		231,233,5,45,0,0,232,231,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,236,
		7,0,0,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,
		0,238,239,1,0,0,0,239,241,5,46,0,0,240,242,7,0,0,0,241,240,1,0,0,0,242,
		243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,78,1,0,0,0,245,249,5,34,
		0,0,246,248,8,1,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,
		250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,262,5,34,0,0,253,257,5,
		39,0,0,254,256,8,2,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,
		257,258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,262,5,39,0,0,261,245,
		1,0,0,0,261,253,1,0,0,0,262,80,1,0,0,0,263,264,5,116,0,0,264,265,5,114,
		0,0,265,266,5,117,0,0,266,273,5,101,0,0,267,268,5,102,0,0,268,269,5,97,
		0,0,269,270,5,108,0,0,270,271,5,115,0,0,271,273,5,101,0,0,272,263,1,0,
		0,0,272,267,1,0,0,0,273,82,1,0,0,0,274,275,5,78,0,0,275,276,5,85,0,0,276,
		277,5,76,0,0,277,278,5,76,0,0,278,84,1,0,0,0,279,281,7,3,0,0,280,279,1,
		0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,
		284,285,6,42,0,0,285,86,1,0,0,0,286,287,5,47,0,0,287,288,5,47,0,0,288,
		292,1,0,0,0,289,291,8,4,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,
		0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,6,43,0,0,
		296,88,1,0,0,0,297,301,7,5,0,0,298,300,7,6,0,0,299,298,1,0,0,0,300,303,
		1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,90,1,0,0,0,303,301,1,0,0,0,
		16,0,174,208,221,224,229,232,237,243,249,257,261,272,282,292,301,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
