//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\coding\test\AntlrCSharp\Grund.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GrundParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, IFBLOCK=29, WHILE=30, THIS=31, 
		STATIC=32, CLASSPOINTER=33, FUNC=34, STRUCT=35, BOOL_OPERATOR=36, INTEGER=37, 
		FLOAT=38, STRING=39, BOOL=40, NULL=41, WS=42, LINE_COMMENT=43, IDENTIFIER=44;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_blockScopeAssignment = 6, 
		RULE_assignment = 7, RULE_memberAssignment = 8, RULE_memberAccession = 9, 
		RULE_functionCall = 10, RULE_inLineIncrement = 11, RULE_parameter = 12, 
		RULE_strucDefinition = 13, RULE_functionDefinition = 14, RULE_listAccession = 15, 
		RULE_expression = 16, RULE_multOP = 17, RULE_addOP = 18, RULE_compareOP = 19, 
		RULE_inLineOP = 20, RULE_boolOP = 21, RULE_constant = 22, RULE_collections = 23, 
		RULE_list = 24, RULE_dictionary = 25, RULE_block = 26;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseIfBlock", "whileBlock", 
		"blockScopeAssignment", "assignment", "memberAssignment", "memberAccession", 
		"functionCall", "inLineIncrement", "parameter", "strucDefinition", "functionDefinition", 
		"listAccession", "expression", "multOP", "addOP", "compareOP", "inLineOP", 
		"boolOP", "constant", "collections", "list", "dictionary", "block"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'ELSE'", "':'", "'END'", "'{'", "'}'", "'='", 
		"'<>'", "'.'", "','", "'['", "']'", "'!'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'++'", "'--'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'IF'", 
		null, "'THIS:'", "'STATIC'", "'=>'", null, "'STRUK'", null, null, null, 
		null, null, "'NULL'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "IFBLOCK", "WHILE", "THIS", "STATIC", "CLASSPOINTER", 
		"FUNC", "STRUCT", "BOOL_OPERATOR", "INTEGER", "FLOAT", "STRING", "BOOL", 
		"NULL", "WS", "LINE_COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grund.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrundParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrundParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrundParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GrundParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IFBLOCK) | (1L << WHILE) | (1L << THIS) | (1L << STATIC) | (1L << FUNC) | (1L << STRUCT) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 54;
				line();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessionContext listAccession() {
			return GetRuleContext<ListAccessionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InLineIncrementContext inLineIncrement() {
			return GetRuleContext<InLineIncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrucDefinitionContext strucDefinition() {
			return GetRuleContext<StrucDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessionContext memberAccession() {
			return GetRuleContext<MemberAccessionContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				ifBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64;
				whileBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65;
				functionDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 66;
				functionCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 67;
				assignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 68;
				listAccession();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 69;
				inLineIncrement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 70;
				strucDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 71;
				memberAccession();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockScopeAssignmentContext blockScopeAssignment() {
			return GetRuleContext<BlockScopeAssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 74;
				assignment();
				}
				break;
			case 2:
				{
				State = 75;
				functionCall();
				}
				break;
			case 3:
				{
				State = 76;
				blockScopeAssignment();
				}
				break;
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 79;
				Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFBLOCK() { return GetToken(GrundParser.IFBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				Match(IFBLOCK);
				State = 84;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 83;
					Match(T__1);
					}
					break;
				}
				State = 86;
				expression(0);
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 87;
					Match(T__2);
					}
				}

				State = 90;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				Match(IFBLOCK);
				State = 94;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 93;
					Match(T__1);
					}
					break;
				}
				State = 96;
				expression(0);
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 97;
					Match(T__2);
					}
				}

				State = 100;
				block();
				{
				State = 101;
				Match(T__3);
				State = 102;
				elseIfBlock();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				block();
				}
				break;
			case IFBLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(GrundParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				Match(WHILE);
				State = 111;
				expression(0);
				State = 112;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(WHILE);
				State = 115;
				expression(0);
				State = 116;
				block();
				{
				State = 117;
				Match(T__3);
				State = 118;
				elseIfBlock();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockScopeAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(GrundParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public BlockScopeAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockScopeAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockScopeAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockScopeAssignmentContext blockScopeAssignment() {
		BlockScopeAssignmentContext _localctx = new BlockScopeAssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_blockScopeAssignment);
		int _la;
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(STATIC);
				State = 123;
				Match(T__4);
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIS || _la==IDENTIFIER) {
					{
					{
					State = 124;
					assignment();
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 130;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				Match(STATIC);
				State = 132;
				Match(T__6);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIS || _la==IDENTIFIER) {
					{
					{
					State = 133;
					assignment();
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessionContext listAccession() {
			return GetRuleContext<ListAccessionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(GrundParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSPOINTER() { return GetToken(GrundParser.CLASSPOINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberAssignmentContext memberAssignment() {
			return GetRuleContext<MemberAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				Match(IDENTIFIER);
				State = 143;
				Match(T__8);
				State = 144;
				expression(0);
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 145;
					Match(T__0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				listAccession();
				State = 149;
				Match(T__8);
				State = 150;
				expression(0);
				State = 152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 151;
					Match(T__0);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				Match(THIS);
				State = 155;
				Match(IDENTIFIER);
				State = 156;
				Match(T__8);
				State = 157;
				expression(0);
				State = 159;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 158;
					Match(T__0);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 161;
				Match(IDENTIFIER);
				State = 162;
				Match(CLASSPOINTER);
				State = 163;
				expression(0);
				State = 164;
				Match(T__9);
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 165;
					Match(T__0);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168;
				memberAssignment();
				State = 169;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessionContext memberAccession() {
			return GetRuleContext<MemberAccessionContext>(0);
		}
		public MemberAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAssignmentContext memberAssignment() {
		MemberAssignmentContext _localctx = new MemberAssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_memberAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			memberAccession();
			State = 174;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GrundParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GrundParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public MemberAccessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccession; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccession(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessionContext memberAccession() {
		MemberAccessionContext _localctx = new MemberAccessionContext(Context, State);
		EnterRule(_localctx, 18, RULE_memberAccession);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				Match(IDENTIFIER);
				State = 177;
				Match(T__10);
				State = 178;
				Match(IDENTIFIER);
				State = 180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 179;
					Match(T__0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(IDENTIFIER);
				State = 183;
				Match(T__10);
				State = 184;
				functionCall();
				State = 186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 185;
					Match(T__0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(IDENTIFIER);
			State = 191;
			Match(T__1);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__6) | (1L << T__12) | (1L << T__14) | (1L << FUNC) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 192;
				expression(0);
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 193;
					Match(T__11);
					State = 194;
					expression(0);
					}
					}
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 202;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InLineIncrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InLineOPContext inLineOP() {
			return GetRuleContext<InLineOPContext>(0);
		}
		public InLineIncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inLineIncrement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInLineIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InLineIncrementContext inLineIncrement() {
		InLineIncrementContext _localctx = new InLineIncrementContext(Context, State);
		EnterRule(_localctx, 22, RULE_inLineIncrement);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				Match(IDENTIFIER);
				State = 205;
				inLineOP();
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 206;
					Match(T__0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				Match(IDENTIFIER);
				State = 210;
				inLineOP();
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 211;
					Match(T__0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrucDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(GrundParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StrucDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strucDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrucDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrucDefinitionContext strucDefinition() {
		StrucDefinitionContext _localctx = new StrucDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_strucDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(STRUCT);
			State = 219;
			Match(IDENTIFIER);
			State = 220;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GrundParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(FUNC);
			State = 223;
			Match(IDENTIFIER);
			State = 224;
			Match(T__1);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 225;
				parameter();
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 226;
					Match(T__11);
					State = 227;
					parameter();
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 235;
			Match(T__2);
			State = 236;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAccessionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAccession; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccession(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListAccessionContext listAccession() {
		ListAccessionContext _localctx = new ListAccessionContext(Context, State);
		EnterRule(_localctx, 30, RULE_listAccession);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(IDENTIFIER);
			State = 239;
			Match(T__12);
			State = 240;
			expression(0);
			State = 241;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOPContext addOP() {
			return GetRuleContext<AddOPContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GrundParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefinitionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public FunctionDefinitionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinitionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOPContext compareOP() {
			return GetRuleContext<CompareOPContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOPContext multOP() {
			return GetRuleContext<MultOPContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOPContext boolOP() {
			return GetRuleContext<BoolOPContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollectionsExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionsContext collections() {
			return GetRuleContext<CollectionsContext>(0);
		}
		public CollectionsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessionContext memberAccession() {
			return GetRuleContext<MemberAccessionContext>(0);
		}
		public MemberAccessionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListAccessionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessionContext listAccession() {
			return GetRuleContext<ListAccessionContext>(0);
		}
		public ListAccessionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccessionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 244;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new CollectionsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				collections();
				}
				break;
			case 3:
				{
				_localctx = new ListAccessionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				listAccession();
				}
				break;
			case 4:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				_localctx = new FunctionDefinitionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				functionDefinition();
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				functionCall();
				}
				break;
			case 7:
				{
				_localctx = new MemberAccessionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 250;
				memberAccession();
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 251;
				Match(T__1);
				State = 252;
				expression(0);
				State = 253;
				Match(T__2);
				}
				break;
			case 9:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 255;
				Match(T__14);
				State = 256;
				expression(5);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 275;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 259;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 260;
						multOP();
						State = 261;
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 263;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 264;
						addOP();
						State = 265;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 267;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 268;
						compareOP();
						State = 269;
						expression(3);
						}
						break;
					case 4:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 271;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 272;
						boolOP();
						State = 273;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOPContext : ParserRuleContext {
		public MultOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOPContext multOP() {
		MultOPContext _localctx = new MultOPContext(Context, State);
		EnterRule(_localctx, 34, RULE_multOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOPContext : ParserRuleContext {
		public AddOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOPContext addOP() {
		AddOPContext _localctx = new AddOPContext(Context, State);
		EnterRule(_localctx, 36, RULE_addOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOPContext : ParserRuleContext {
		public CompareOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOPContext compareOP() {
		CompareOPContext _localctx = new CompareOPContext(Context, State);
		EnterRule(_localctx, 38, RULE_compareOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InLineOPContext : ParserRuleContext {
		public InLineOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inLineOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInLineOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InLineOPContext inLineOP() {
		InLineOPContext _localctx = new InLineOPContext(Context, State);
		EnterRule(_localctx, 40, RULE_inLineOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_la = TokenStream.LA(1);
			if ( !(_la==T__20 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OPERATOR() { return GetToken(GrundParser.BOOL_OPERATOR, 0); }
		public BoolOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOPContext boolOP() {
		BoolOPContext _localctx = new BoolOPContext(Context, State);
		EnterRule(_localctx, 42, RULE_boolOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(GrundParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GrundParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GrundParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GrundParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(GrundParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 44, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryContext dictionary() {
			return GetRuleContext<DictionaryContext>(0);
		}
		public CollectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collections; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionsContext collections() {
		CollectionsContext _localctx = new CollectionsContext(Context, State);
		EnterRule(_localctx, 46, RULE_collections);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				list();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				dictionary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 48, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__12);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__6) | (1L << T__12) | (1L << T__14) | (1L << FUNC) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 297;
				expression(0);
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 298;
					Match(T__11);
					State = 299;
					expression(0);
					}
					}
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 307;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GrundParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GrundParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryContext dictionary() {
		DictionaryContext _localctx = new DictionaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_dictionary);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(T__6);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 317;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 310;
						Match(STRING);
						State = 311;
						Match(T__4);
						State = 312;
						expression(0);
						State = 313;
						Match(T__11);
						}
						} 
					}
					State = 319;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				}
				{
				State = 320;
				Match(STRING);
				State = 321;
				Match(T__4);
				State = 322;
				expression(0);
				}
				}
			}

			State = 325;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrundVisitor<TResult> typedVisitor = visitor as IGrundVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_block);
		int _la;
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				Match(T__4);
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IFBLOCK) | (1L << WHILE) | (1L << THIS) | (1L << STATIC) | (1L << FUNC) | (1L << STRUCT) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 328;
					line();
					}
					}
					State = 333;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 334;
				Match(T__5);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335;
				Match(T__6);
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IFBLOCK) | (1L << WHILE) | (1L << THIS) | (1L << STATIC) | (1L << FUNC) | (1L << STRUCT) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 336;
					line();
					}
					}
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 342;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\x15C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\a', 
		'\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'K', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'P', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'S', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'W', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '[', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x61', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x65', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'k', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'o', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '{', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\x80', '\n', '\b', '\f', '\b', '\xE', '\b', '\x83', 
		'\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x89', '\n', '\b', '\f', '\b', '\xE', '\b', '\x8C', '\v', '\b', 
		'\x3', '\b', '\x5', '\b', '\x8F', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x95', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x9B', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xA2', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\xA9', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\xAE', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xB7', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xBD', '\n', '\v', '\x5', '\v', '\xBF', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '\xC6', '\n', '\f', '\f', '\f', '\xE', '\f', '\xC9', '\v', 
		'\f', '\x5', '\f', '\xCB', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xD2', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xD7', '\n', '\r', '\x5', 
		'\r', '\xD9', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xE7', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xEA', '\v', '\x10', '\x5', 
		'\x10', '\xEC', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x104', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x116', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\x119', '\v', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x129', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x12F', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x132', '\v', '\x1A', 
		'\x5', '\x1A', '\x134', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\a', '\x1B', '\x13E', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', 
		'\x141', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x146', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\a', '\x1C', '\x14C', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\x14F', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x154', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x157', 
		'\v', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x15A', '\n', '\x1C', '\x3', 
		'\x1C', '\x2', '\x3', '\"', '\x1D', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x2', '\a', '\x3', '\x2', '\x12', '\x14', '\x3', '\x2', '\x15', '\x18', 
		'\x3', '\x2', '\x19', '\x1E', '\x3', '\x2', '\x17', '\x18', '\x3', '\x2', 
		'\'', '+', '\x2', '\x17D', '\x2', ';', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x6', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'j', '\x3', '\x2', '\x2', '\x2', '\n', 'n', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'z', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x12', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x18', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xF0', '\x3', '\x2', '\x2', '\x2', '\"', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x11A', '\x3', '\x2', '\x2', '\x2', '&', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x120', '\x3', '\x2', '\x2', '\x2', ',', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x124', '\x3', '\x2', '\x2', '\x2', '\x30', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x137', '\x3', '\x2', '\x2', '\x2', '\x36', '\x159', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ':', '\x5', '\x4', '\x3', '\x2', '\x39', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', 
		'<', '>', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '\x2', '\x2', '\x3', '?', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '@', 'K', '\x5', '\x6', '\x4', '\x2', '\x41', 'K', '\x5', '\b', 
		'\x5', '\x2', '\x42', 'K', '\x5', '\f', '\a', '\x2', '\x43', 'K', '\x5', 
		'\x1E', '\x10', '\x2', '\x44', 'K', '\x5', '\x16', '\f', '\x2', '\x45', 
		'K', '\x5', '\x10', '\t', '\x2', '\x46', 'K', '\x5', ' ', '\x11', '\x2', 
		'G', 'K', '\x5', '\x18', '\r', '\x2', 'H', 'K', '\x5', '\x1C', '\xF', 
		'\x2', 'I', 'K', '\x5', '\x14', '\v', '\x2', 'J', '@', '\x3', '\x2', '\x2', 
		'\x2', 'J', '\x41', '\x3', '\x2', '\x2', '\x2', 'J', '\x42', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x43', '\x3', '\x2', '\x2', '\x2', 'J', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'J', '\x45', '\x3', '\x2', '\x2', '\x2', 'J', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 
		'H', '\x3', '\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', '\x5', '\x3', '\x2', '\x2', '\x2', 'L', 'P', '\x5', '\x10', '\t', 
		'\x2', 'M', 'P', '\x5', '\x16', '\f', '\x2', 'N', 'P', '\x5', '\xE', '\b', 
		'\x2', 'O', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'S', '\a', '\x3', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'V', '\a', '\x1F', '\x2', '\x2', 'U', 'W', '\a', '\x4', 
		'\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x5', '\"', 
		'\x12', '\x2', 'Y', '[', '\a', '\x5', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x5', '\x36', '\x1C', '\x2', ']', 'k', 
		'\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\x1F', '\x2', '\x2', '_', 
		'\x61', '\a', '\x4', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x64', '\x5', '\"', '\x12', '\x2', '\x63', '\x65', 
		'\a', '\x5', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\x5', '\x36', '\x1C', '\x2', 'g', 'h', '\a', 
		'\x6', '\x2', '\x2', 'h', 'i', '\x5', '\n', '\x6', '\x2', 'i', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'T', '\x3', '\x2', '\x2', '\x2', 'j', '^', '\x3', 
		'\x2', '\x2', '\x2', 'k', '\t', '\x3', '\x2', '\x2', '\x2', 'l', 'o', 
		'\x5', '\x36', '\x1C', '\x2', 'm', 'o', '\x5', '\b', '\x5', '\x2', 'n', 
		'l', '\x3', '\x2', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', '\v', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', ' ', '\x2', '\x2', 
		'q', 'r', '\x5', '\"', '\x12', '\x2', 'r', 's', '\x5', '\x36', '\x1C', 
		'\x2', 's', '{', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', ' ', '\x2', 
		'\x2', 'u', 'v', '\x5', '\"', '\x12', '\x2', 'v', 'w', '\x5', '\x36', 
		'\x1C', '\x2', 'w', 'x', '\a', '\x6', '\x2', '\x2', 'x', 'y', '\x5', '\n', 
		'\x6', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'z', 't', '\x3', '\x2', '\x2', '\x2', '{', '\r', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\a', '\"', '\x2', '\x2', '}', '\x81', 
		'\a', '\a', '\x2', '\x2', '~', '\x80', '\x5', '\x10', '\t', '\x2', '\x7F', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x84', '\x8F', '\a', '\b', '\x2', 
		'\x2', '\x85', '\x86', '\a', '\"', '\x2', '\x2', '\x86', '\x8A', '\a', 
		'\t', '\x2', '\x2', '\x87', '\x89', '\x5', '\x10', '\t', '\x2', '\x88', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\a', '\n', '\x2', 
		'\x2', '\x8E', '|', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\xF', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\a', '.', '\x2', '\x2', '\x91', '\x92', '\a', '\v', '\x2', '\x2', 
		'\x92', '\x94', '\x5', '\"', '\x12', '\x2', '\x93', '\x95', '\a', '\x3', 
		'\x2', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x97', '\x5', ' ', '\x11', '\x2', '\x97', '\x98', '\a', '\v', 
		'\x2', '\x2', '\x98', '\x9A', '\x5', '\"', '\x12', '\x2', '\x99', '\x9B', 
		'\a', '\x3', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9D', '\a', '!', '\x2', '\x2', '\x9D', '\x9E', 
		'\a', '.', '\x2', '\x2', '\x9E', '\x9F', '\a', '\v', '\x2', '\x2', '\x9F', 
		'\xA1', '\x5', '\"', '\x12', '\x2', '\xA0', '\xA2', '\a', '\x3', '\x2', 
		'\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '.', '\x2', '\x2', '\xA4', '\xA5', '\a', '#', '\x2', '\x2', 
		'\xA5', '\xA6', '\x5', '\"', '\x12', '\x2', '\xA6', '\xA8', '\a', '\f', 
		'\x2', '\x2', '\xA7', '\xA9', '\a', '\x3', '\x2', '\x2', '\xA8', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\x12', 
		'\n', '\x2', '\xAB', '\xAC', '\x5', '\"', '\x12', '\x2', '\xAC', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\x96', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\x5', '\x14', '\v', '\x2', '\xB0', '\xB1', '\a', '\v', 
		'\x2', '\x2', '\xB1', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', 
		'\a', '.', '\x2', '\x2', '\xB3', '\xB4', '\a', '\r', '\x2', '\x2', '\xB4', 
		'\xB6', '\a', '.', '\x2', '\x2', '\xB5', '\xB7', '\a', '\x3', '\x2', '\x2', 
		'\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', 
		'\a', '.', '\x2', '\x2', '\xB9', '\xBA', '\a', '\r', '\x2', '\x2', '\xBA', 
		'\xBC', '\x5', '\x16', '\f', '\x2', '\xBB', '\xBD', '\a', '\x3', '\x2', 
		'\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'.', '\x2', '\x2', '\xC1', '\xCA', '\a', '\x4', '\x2', '\x2', '\xC2', 
		'\xC7', '\x5', '\"', '\x12', '\x2', '\xC3', '\xC4', '\a', '\xE', '\x2', 
		'\x2', '\xC4', '\xC6', '\x5', '\"', '\x12', '\x2', '\xC5', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', '\x5', '\x2', '\x2', '\xCD', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '.', '\x2', '\x2', '\xCF', 
		'\xD1', '\x5', '*', '\x16', '\x2', '\xD0', '\xD2', '\a', '\x3', '\x2', 
		'\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD4', '\a', '.', '\x2', '\x2', '\xD4', '\xD6', '\x5', '*', '\x16', '\x2', 
		'\xD5', '\xD7', '\a', '\x3', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD9', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\a', '.', '\x2', '\x2', '\xDB', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '%', '\x2', '\x2', '\xDD', 
		'\xDE', '\a', '.', '\x2', '\x2', '\xDE', '\xDF', '\x5', '\x36', '\x1C', 
		'\x2', '\xDF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', 
		'$', '\x2', '\x2', '\xE1', '\xE2', '\a', '.', '\x2', '\x2', '\xE2', '\xEB', 
		'\a', '\x4', '\x2', '\x2', '\xE3', '\xE8', '\x5', '\x1A', '\xE', '\x2', 
		'\xE4', '\xE5', '\a', '\xE', '\x2', '\x2', '\xE5', '\xE7', '\x5', '\x1A', 
		'\xE', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\x5', 
		'\x2', '\x2', '\xEE', '\xEF', '\x5', '\x36', '\x1C', '\x2', '\xEF', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '.', '\x2', '\x2', '\xF1', 
		'\xF2', '\a', '\xF', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\"', '\x12', 
		'\x2', '\xF3', '\xF4', '\a', '\x10', '\x2', '\x2', '\xF4', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\b', '\x12', '\x1', '\x2', '\xF6', 
		'\x104', '\x5', '.', '\x18', '\x2', '\xF7', '\x104', '\x5', '\x30', '\x19', 
		'\x2', '\xF8', '\x104', '\x5', ' ', '\x11', '\x2', '\xF9', '\x104', '\a', 
		'.', '\x2', '\x2', '\xFA', '\x104', '\x5', '\x1E', '\x10', '\x2', '\xFB', 
		'\x104', '\x5', '\x16', '\f', '\x2', '\xFC', '\x104', '\x5', '\x14', '\v', 
		'\x2', '\xFD', '\xFE', '\a', '\x4', '\x2', '\x2', '\xFE', '\xFF', '\x5', 
		'\"', '\x12', '\x2', '\xFF', '\x100', '\a', '\x5', '\x2', '\x2', '\x100', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\a', '\x11', '\x2', 
		'\x2', '\x102', '\x104', '\x5', '\"', '\x12', '\a', '\x103', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\x103', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x117', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\f', '\x6', '\x2', '\x2', '\x106', '\x107', '\x5', '$', '\x13', '\x2', 
		'\x107', '\x108', '\x5', '\"', '\x12', '\a', '\x108', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\f', '\x5', '\x2', '\x2', '\x10A', 
		'\x10B', '\x5', '&', '\x14', '\x2', '\x10B', '\x10C', '\x5', '\"', '\x12', 
		'\x6', '\x10C', '\x116', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\f', '\x4', '\x2', '\x2', '\x10E', '\x10F', '\x5', '(', '\x15', '\x2', 
		'\x10F', '\x110', '\x5', '\"', '\x12', '\x5', '\x110', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\f', '\x3', '\x2', '\x2', '\x112', 
		'\x113', '\x5', ',', '\x17', '\x2', '\x113', '\x114', '\x5', '\"', '\x12', 
		'\x4', '\x114', '\x116', '\x3', '\x2', '\x2', '\x2', '\x115', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x115', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x119', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '#', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x11B', '\t', '\x2', '\x2', '\x2', '\x11B', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\t', '\x3', '\x2', 
		'\x2', '\x11D', '\'', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\t', 
		'\x4', '\x2', '\x2', '\x11F', ')', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x121', '\t', '\x5', '\x2', '\x2', '\x121', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x123', '\a', '&', '\x2', '\x2', '\x123', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x125', '\t', '\x6', '\x2', '\x2', '\x125', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x5', '\x32', '\x1A', 
		'\x2', '\x127', '\x129', '\x5', '\x34', '\x1B', '\x2', '\x128', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x31', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x133', '\a', '\xF', 
		'\x2', '\x2', '\x12B', '\x130', '\x5', '\"', '\x12', '\x2', '\x12C', '\x12D', 
		'\a', '\xE', '\x2', '\x2', '\x12D', '\x12F', '\x5', '\"', '\x12', '\x2', 
		'\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x133', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\a', 
		'\x10', '\x2', '\x2', '\x136', '\x33', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x145', '\a', '\t', '\x2', '\x2', '\x138', '\x139', '\a', ')', '\x2', 
		'\x2', '\x139', '\x13A', '\a', '\a', '\x2', '\x2', '\x13A', '\x13B', '\x5', 
		'\"', '\x12', '\x2', '\x13B', '\x13C', '\a', '\xE', '\x2', '\x2', '\x13C', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x141', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x142', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\a', ')', '\x2', '\x2', '\x143', 
		'\x144', '\a', '\a', '\x2', '\x2', '\x144', '\x146', '\x5', '\"', '\x12', 
		'\x2', '\x145', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x148', '\a', '\n', '\x2', '\x2', '\x148', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x149', '\x14D', '\a', '\a', '\x2', '\x2', '\x14A', '\x14C', 
		'\x5', '\x4', '\x3', '\x2', '\x14B', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x15A', '\a', '\b', '\x2', '\x2', '\x151', '\x155', '\a', 
		'\t', '\x2', '\x2', '\x152', '\x154', '\x5', '\x4', '\x3', '\x2', '\x153', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x154', '\x157', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15A', '\a', 
		'\n', '\x2', '\x2', '\x159', '\x149', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '*', ';', 'J', 'O', 'R', 'V', 'Z', '`', '\x64', 'j', 'n', 'z', 
		'\x81', '\x8A', '\x8E', '\x94', '\x9A', '\xA1', '\xA8', '\xAD', '\xB6', 
		'\xBC', '\xBE', '\xC7', '\xCA', '\xD1', '\xD6', '\xD8', '\xE8', '\xEB', 
		'\x103', '\x115', '\x117', '\x128', '\x130', '\x133', '\x13F', '\x145', 
		'\x14D', '\x155', '\x159',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
